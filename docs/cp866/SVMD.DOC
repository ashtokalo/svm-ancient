

                    ████████    ██      ██   ██        ██ TM
                   ██      ██   ██      ██   ███      ███
                   ██  ░░░░░░░░ ██░░    ██ ░░████░   ████ ░░ ░░
                   ██ ░░      ░░██░░    ██ ░░██ ██░ ██ ██░░░
                    ████████     ██░   ██  ░░██ ░████  ██░░░
                      ░░   ██    ██░   ██  ░░██ ░░██░  ██ ░░
                       ░░░░██░░   ██░ ██  ░░ ██ ░░  ░░░██ ░░
                   ██      ██ ░░   ████   ░░ ██ ░░   ░░██ ░░
                    ████████  ░░    ██░  ░░  ██ ░░     ██ ░░
                      ░░      ░░      ░░░░      ░░        ░░
                       ░░░░░░░░        ░░       ░░        ░░

                                 SVM Debugger

                                 Version  1.0

                        Copyright (C) 1999 ShAG Studio

                                 Luhansk, 1999


                           РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ

                                 ОГЛАВЛЕНИЕ:
          1. Знакомство с отладчиком.
          2. Интерфейс.
          3. Клавиатура.
          4. Ключи отладчика.
          5. Дизассемблирование программ.
          6. От автора.


 1. ЗНАКОМСТВО С ОТЛАДЧИКОМ.
 ────────────────────────────────────────────────────────────────────────────
    Отладчик    представляет   собой   простейший   вариант   программы   для
 дизассемблирования   и   пошагового  выполнения  программы.  Отладчик  может
 выполнять  следующие  функции:  пошаговое  выполнение  программы, выполнение
 блоков,  использование  маркеров  -  точек  останова,  просмотр  содержимого
 памяти,  просмотр  состояния  регистров  и  флагов,  просмотр  головы стека,
 дизассемблирование программы и последующее её сохранение с комментариями.
    Если вы хотите использовать этот отладчик, Вам необходимо иметь компьютер
 не ниже указанной конфигурации:
    процессор      - не ниже 80x286
    сопроцессор    - обязательно (в соответствии с процессором)
    оперативная память           - не менее 1 мегабайта
    свободная оперативная память - не менее 290 килобайт
    операционная система         - MS-DOS 4.0 и выше
    жесткий диск - обязательно, не менее 1 мегабайта свободного пространства
    монитор      - VGA и выше
    Если   Ваш   компьютер  слабее  данной  конфигурации,  правильная  работа
 отладчика не гарантируется.


 2. ИНТЕРФЕЙС.
 ────────────────────────────────────────────────────────────────────────────
    После запуска отладчика на экране появляются три основных окна, в которых
 будет  отображаться  состояние  регистров, головы стека и памяти виртуальной
 машины. На следующем рисунке показан общий вид отладчика при работе:

 SVM Debugger  Version 1.0  Copyright (c) 1999 ShAG Studio
╔═══════════════════════════════════ Memory ═══════════════════════════════════╗
║ ┌──────────────┐   ┌───────────────────────────────────────────────────────┐ ║
║ │              │   │                                                       │ ║
║▒│▒▒▒▒▒▒▒▒▒▒▒▒▒▒│▒▒▒│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ Строка указатель ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│▒║
║ │    Блок 1.   │   │                      Блок 2.                          │ ║
║ │              │   │                                                       │ ║
║▓│▓▓▓▓▓▓▓▓▓▓▓▓▓▓│▓▓▓│▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ Маркер ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓│▓║
║ │              │   │                                                       │ ║
║ └──────────────┘   └───────────────────────────────────────────────────────┘ ║
╚══════════════════════════════════════════════════════════════════════════════╝
╔═════════════════════ Registers ═════════════════════╗╔═════ Stack head ══════╗
║ LAX 0000000000000000 EAX 00000000 AX 0000 AL 00 o=0 ║║ LSP 0000000000000000 ║
║ LBX 0000000000000000 EBX 00000000 BX 0000 AH 00 s=0 ║║      0000000000000000 ║
║ LCX 0000000000000000 ECX 00000000 CX 0000 BL 00 z=0 ║║      0000000000000000 ║
║ LDX 0000000000000000 EDX 00000000 DX 0000 BH 00 c=0 ║║      0000000000000000 ║
║ LFS 0000000000000000 EFS 00000000 FS 0000 CL 00 p=0 ║║      0000000000000000 ║
║ LSS 0000000000000000 ESS 00000000 SS 0000 CH 00 a=0 ║║      0000000000000000 ║
║ LSP 0000000000000000 ESP 00000000 SP 0000 DL 00     ║║      0000000000000000 ║
║ LIP 0000000000000000 EIP 00000000 IP 0000 DH 00     ║║      0000000000000000 ║
║ LEP 0000000000000000 EEP 00000000 EP 0000       e=0 ║║      0000000000000000 ║
║ LFP 0000000000000000 EFP 00000000 FP 0000       g=0 ║║      0000000000000000 ║
║ LGP 0000000000000000 EGP 00000000 GP 0000       l=0 ║║ LSS 0000000000000000 ║
╚═════════════════════════════════════════════════════╝╚═══════════════════════╝
 Alt+X Exit  F2 Set BP  F7 Step  F8 Step over  Ctrl+F9 Run              F1 Help

 Окно #1.
    Самое  главное  окно  -  окно  с  названием  "Memory". В нем отображается
 состояние   памяти.  Окно  имеет  два  главных  блока.  Первый  -  "Блок  1"
 предназначен  для  отображения адреса памяти. Второе - "Блок 2" предназначен
 для   отображения   содержимого  памяти.  отладчик  автоматически  проверяет
 состояние  памяти:  если  это команды процессора, то он отображает их в виде
 команд,  записанных  по всем правилам. Если это не команда, то он отображает
 память в шестнадцатеричном виде записанном по правилам ассемблера.
    "Строка указатель" - этот элемент окна указывает на следующюю исполняемую
 команду.  Но  используя  клавишы  перемещения курсора (вверх, вниз, страницу
 вверх,  страницу  вниз)  Вы  можете передвигаться по памяти. Если в какой-то
 момент  времени этот указатель отказывается перемещаться, значит вы достигли
 границ  памяти  (нулевой  или максимально допустимый адрес). При перемещении
 отладчик  всегда  автоматически  определяет  состояние  памяти на изменения,
 поэтому,  если  программа  меняят  свой  код,  отладчик  это отобразит. Цвет
 элемента - черные буквы на темном циане.
    "Маркер"  - этот элемент предназначен для фиксирования места в памяти как
 точку   на  которой  эмулятор  должен  остановиться  и  передать  управление
 пользователю.  Главная  цель  этого элемента - помочь пользователю в отладке
 большой   программы,   когда   идти   пошагово   занимает   много  времени и
 нецелесообразно. Цвет элемента - желтые буквы на красном фоне.

 Окно #2.
    Второе   окно   -   окно  с  названием  "Registers".  В  нем  динамачески
 отображаются  регистры  и  флаги  с  их  значениями.  отладчик автоматически
 отслеживает  изменения  регистров  и  если такой факт произошол - измененные
 ристры  и флаги отображаются белым цветом на темном циане, а все остальные -
 серым цветом на темном циане.

 Окно #3.
    Третье   окно  -  окно  с  названием  "Stack  head".  В  нем  динамически
 отображается состояние стека. Надпись "LSP" указывает на байты на которые в
 данный  момент указывает регистр LSP, а надпись "LSS" указывает направление
 на начало стека.


 3. КЛАВИАТУРА.
 ────────────────────────────────────────────────────────────────────────────
    В качестве  устройства   взаимодецствия   с   пользователем  используется
 клавиатура.  Так  как отладчик не имеет всплывающих меню, то все его функции
 приходится  вызывать  с  помощью комбинакций клавиш - далее горячии клавишы.
 Ниже приводится таблица горячих клавиш и их назначении:
 ┌─────────────────┬────────────────────────────────────────────────────────┐
 │ Горячии клавиши │  Назначение                                            │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ Alt+X           │  После  нажатия  этих  клавиш,  отладчик автоматически │
 │                 │ закрывает   все   используемые  им  рессурсы  системы, │
 │                 │ восстанавливает  содержимое  экрана  до  его запуска и │
 │                 │ передает управление запустившей его программе.         │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ Alt+E           │  После  нажатия  этих  клавиш,  отладчик  меняет режим │
 │                 │ отображения   информации    на   противоположный.   По │
 │                 │ умолчанию  активирован первый  режим. Режим #1. В этом │
 │                 │ режиме  все  команды и  регистры процессора выделяются │
 │                 │ белым  цветом,  а  остальные  данные выводятся  черным │
 │                 │ желтым  цветом  или черным, когда в  строке указателе. │
 │                 │ Режим  #2.  В  этом  режиме  вся выводимая  информация │
 │                 │ имеет желтый цвет или черный в строке указателе.       │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ F2              │  При  нажатие  на эту клавишу, отладчик проверяет была │
 │                 │ ли  установленна  здесь  точка останова. Если была, то │
 │                 │ отладчик  убирает  её  с  этого  адреса,  если нет, то │
 │                 │ устанавливает точку останова по этому адресу.          │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ F7              │  При   нажатие  на  эту  клавишу,  отладчик  выполняет │
 │                 │ команду, на которую указывает регистр LIP. После этого │
 │                 │ он  обновляет  содержимое  окон  "Registers"  и "Stack │
 │                 │ head" и передвигает указатель на следующюю команду.    │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ F8              │  При   нажатие  на  эту  клавишу,  отладчик  выполняет │
 │                 │ команду, на которую указывает регистр LIP. После этого │
 │                 │ он  обновляет  содержимое  окон  "Registers"  и "Stack │
 │                 │ head" и передвигает указатель на следующюю команду. Но │
 │                 │ если   эта   команда   изменяет   порядок   выполнения │
 │                 │ программы, то отладчик, восстанавливает экран, который │
 │                 │ был  до  его запуска и выполняет все команды, пока они │
 │                 │ не  вернуться  в  место  вызова,  не  прервутся точкой │
 │                 │ останова или не будет нажата клавиша F12.              │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ Ctrl+F9         │  После  нажатия этих клавиш, отладчик начнет выполнять │
 │                 │ программу    как   обыкновенный   эмулятор   и   будет │
 │                 │ останавливаться  только  если  в  процессе  выполнения │
 │                 │ команд   попадется  точка  останова,  если  закончится │
 │                 │ программа или если будет нажата клавиша F12.           │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ Alt+F5          │  После  нажатия  на  эти  клавишы отладчик восстановит │
 │                 │ содержимое  текстового  экрана,  который  используется │
 │                 │ вкачестве  терминала,  и  будет  ожидать нажатия любой │
 │                 │ клавишы.   После   чего   восстановит   рабочий  экран │
 │                 │ отладчика.                                             │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ F1              │  После   нажатия  на   эту  клавишу  отладчик  покажет │
 │                 │ краткую  справку  по  клавишам управления  и предложит │
 │                 │ посмотреть  этот  файл  для  получения   более  полной │
 │                 │ информации.                                            │
 └─────────────────┴────────────────────────────────────────────────────────┘


 4. КЛЮЧИ ОТЛАДЧИКА.
 ────────────────────────────────────────────────────────────────────────────
    Так как отладчик представляет собой простейшую версию, то все настройки
 он воспринимает через командую строку. В данной версии имеется всего один
 ключ, с помощью которого вы можете заставить отладчик дизассемблировать
 программу в файл. В качестве параметров отладчик всегда должен получать
 следующее:
  первый - полное  имя файла (с  расширением и путем  к нему) который
           надо загрузить для работы
  второй - если вы  хотите, чтобы отладчик  сгенерировал ассемблерную
           программу по имеющемуся файлу, вы должны задать ключ /MDF.


 5. ДИЗАССЕМБЛИРОВАНИЕ ПРОГРАММ.
 ────────────────────────────────────────────────────────────────────────────
    Если вам захочется получить нормальную программу (на языке ассемблере) из
 имеющегося  исполняемого  файла,  Вы  должны  передать  в  качестве  второго
 параметра  в  командной строке ключ /MDF. Если отладчик обнаружит этот ключ,
 он  загрузить  программу в память дизассемблирует и сохранит её в файл с тем
 же  именем  и  путем,  но  с  расширение  DAS.  В этом файле будут записанны
 команды,   в   соответствии   с   синтаксисом   ассемблера,  данные  в  виде
 шестнадцатеричных  байт,  определитель стека и информация о файле. Так же, в
 конце  каждой  строки  с  командой  или  данными  будет  сохранен её адрес в
 шестнадцатеричном  виде,  а  перед  каждой  командой  CSP и RET будет стоять
 строка  комментария, а после команды RET пустая строка, чтобы, в случае если
 это  последняя  команда  процедуры, было легче читать такую программу. После
 дизассемблирования  полученный  файл  может  быть откомпилирован стандартным
 компилятором  SVMAC.EXE  версии  1.2  и  старше,  без  каких-либо  ошибок. В
 результате    такой   компиляции   получится   файл   полностью   идентичный
 дизассемблированному.


 6. ОТ АВТОРА.
 ────────────────────────────────────────────────────────────────────────────
    Я  надеюсь, что на данном этапе развития моего проекта SVM, данная версия
 отладчика  значительно поможет Вам при изучении работы виртуальной машины, а
 также  при  написании  и  отладке  программ.  Я  надеюсь,  Вы не собираетесь
 использовать  отладчик  для  ломки  чужих  программ.  Даже  если  я и сделал
 возможность дизассемблировать готовые программы, это не значит, что отладчик
 предназначен  для  ломки.  Так как я это делал с целью протестировать работу
 отладчика и компилятора.



 Автор программы:          Штокало Алексей Геннадиевич
 Адрес домашней странички: www.shag.itgo.com
 E-mail:                   shag@qnx.com
 ────────────────────────────────────────────────────────────────────────────


                    ████████    ██      ██   ██        ██ TM
                   ██      ██   ██      ██   ███      ███
                   ██  ░░░░░░░░ ██░░    ██ ░░████░   ████ ░░ ░░
                   ██ ░░      ░░██░░    ██ ░░██ ██░ ██ ██░░░
                    ████████     ██░   ██  ░░██ ░████  ██░░░
                      ░░   ██    ██░   ██  ░░██ ░░██░  ██ ░░
                       ░░░░██░░   ██░ ██  ░░ ██ ░░  ░░░██ ░░
                   ██      ██ ░░   ████   ░░ ██ ░░   ░░██ ░░
                    ████████  ░░    ██░  ░░  ██ ░░     ██ ░░
                      ░░      ░░      ░░░░      ░░        ░░
                       ░░░░░░░░        ░░       ░░        ░░

                           SVM Assembler Compiller

                                Version 1.2

                        Copyright (C) 1999 ShAG Studio

                                Luhansk, 1999


                            РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ

                                  ОГЛАВЛЕНИЕ:
          1. Знакомство с компилятором.
          2. Ключи компилятора.
          3. Создание и использование языковых файлов интерфейса.
          4. Создание конфигурационных файлов.
          5. Числа.
          6. Директивы компилятора.
          7. Имена переменных, меток, процедур, констант.
          8. Локальные метки.
          9. От автора.


 1. ЗНАКОМСТВО С КОМПИЛЯТОРОМ.
 ────────────────────────────────────────────────────────────────────────────
    Компилятор   представляет   собой   программу   для  компиляции  программ
 (написанных  на  языке ассемблере) из командной строки. Для этого компилятор
 имеет ряд ключей по настройке процесса компиляции и используемых технических
 рессурсов.  Тексты  программ  должны писаться без форматирования. Напримеру,
 для  написания  своих  программ  вы можете использовать встроенный текстовый
 редакторы  таких дисковых оболочек, как: Volkov Commander, Norton Commander,
 Dos  Navigator, а также текстовые редакторы других компиляторов, таких, как:
 Turbo Pascal, Turbo C, T&A и им подобных.

   МИНИМАЛЬНЫЕ ТРЕБОВАНИЯ К ТЕХНИКЕ:
    процессор - не ниже 80x286
    оперативная память компьютера - не менее 1 мегабайта
    свободная оперативная память - 140 килобайт, но чем больше памяти -
     тем больше кеш память виртуальной памяти и скорость компиляции.
    операционная система - MS-DOS 4.0 и выше.
   ОБЯЗАТЕЛЬНЫЕ КОМПОНЕНТЫ:
    сопроцессор - соответственно с основным процессором
    жесткий  диск  -  минимум 2 мегабайта  свободного пространства, без учета
    места   под   компилятор,   библиотеки,   примеры,  документации  и  ваши
    программы.

  ┌───────────────────────────────────────────────────────────────────────┐
  │    В зависимости от объема ваших программ, вам может понадобится и    │
  │                   больше места чем здесь указанно!                    │
  └───────────────────────────────────────────────────────────────────────┘
  ┌───────────────────────────────────────────────────────────────────────┐
  │      Компилятор предназначен для работы в системе MS-DOS и может      │
  │           конфликтовать с другими операционными системами!            │
  └───────────────────────────────────────────────────────────────────────┘


 2. КЛЮЧИ КОМПИЛЯТОРА.
 ────────────────────────────────────────────────────────────────────────────
    Так  как  компилятор  предназначен  для  работы в командной строке, то он
 имеет  ряд  ключей  с помощью которых вы можете настроить процесс компиляции
 и  использование  тех  или  иных  технических средств. Все ключи с их полным
 описанием  расположены  в  таблице  следующей далее. Размер букв в ключах не
 играет никакой разницы.
 ┌───────────────┬──────────────────────────────────────────────────────────┐
 │  Ключ         │  Описание                                                │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │   /?          │  Этот ключ показывает компилятору, что вы хотите получить│
 │   /H          │ информацию  о его параметрах. При этом компилятор выведет│
 │               │ всю  требуемую информацию и завершит свою работы. Если вы│
 │               │ запустите   компилятор   без  каких-либо  параметров,  то│
 │               │ компилятор выдаст точно такую же информацию как и с этими│
 │               │ ключами.                                                 │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │   /GD         │  Этот  ключ показывает компилятору, что вы хотите получит│
 │               │ полную  (детальную)  карту  памяти,  т.е.  файл в котором│
 │               │ будут  содержаться  списки  всех  меток для перехода с их│
 │               │ адресами,   всех   процедур  с  их  точками  входа,  всех│
 │               │ переменных  с  их  адресами  в памяти, всех дополнительно│
 │               │ подключаемых  файлов  директивой  INCLUDE,  а также точка│
 │               │ входа  в  программу,  т.е.  адрес  в  памяти,  с которого│
 │               │ начнеться  выполнение  программы,  точка  выхода,  размер│
 │               │ блока кода, размер  блока данных, размер стека. Имя файла│
 │               │ карты памяти составляется из имени файла исходного текста│
 │               │ программы с заменой расширения файла на расширение MAP.  │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │   /GL         │  Этот   ключ   делает   практически   тоже  самое,  что и│
 │               │ предыдущий,  только  при формировании файла, информация о│
 │               │ переменных не будет в него включаться.                   │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │   /GV         │  Этот ключ делает практически тоже самое, что и ключ /GD,│
 │               │ но  при  этом информация о процедурах и метках перехода в│
 │               │ файл карты памяти не включается.                         │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │   /GM         │  Этот  ключ  показывает компилятору, что вы хотите, чтобы│
 │               │ все  сообщения  о  неточностях  в  тексте  программы  (не│
 │               │ ошибки)   компилятор   выводил   в   специальный   файл с│
 │               │ расширением MSG. При этом имя этого файла будет такое же,│
 │               │ как и имя файла исходного текста программы.              │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │ /L:filename   │  Если  у  вас  возникнут  какие-то  проблемы  с переводом│
 │               │ сообщений компилятора или если вы хотите чтобы компилятор│
 │вместо filename│ общался   с   вами  на  вашем  родном  языке,  вы  должны│
 │вы должны вста-│ использовать  этот ключ, для загрузки специального файла,│
 │вить имя языко-│ содержащего   все   сообщения   и   все  текстовые  фразы│
 │вого файла     │ используемые  компилятором на нужном вам языке. Эти файлы│
 │               │ имеют  расширение  LNG,  а  имя  в соответствии с языком:│
 │               │ RUSSIAN.LNG, UKRAINIA.LNG  и т.д. Также вы можете создать│
 │               │ свой  языковой  файл  для  какого-то  еще  языка. Как это│
 │               │ сделать  вы можете узнать из главы этого файла - СОЗДАНИЕ│
 │               │ И ИСПОЛЬЗОВАНИЕ ЯЗЫКОВЫХ ФАЙЛОВ ИНТЕРФЕЙСА.              │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │ /С:filename   │  Если  вы  активно  используете  дополнительные настройки│
 │               │ компилятора  вы  можете  сохранить  их в конфигурационном│
 │вместо filename│ файле  с  расширением  INI и подключать при использовании│
 │вы должны вста-│ компилятора  при  помощи  этого ключа. По умолчанию, если│
 │вить имя языко-│ компилятор  находит  файл  с  именем  SVMAC.INI  в том же│
 │вого файла     │ каталоге где он находится сам, то он использует настройки│
 │               │ этого   файла   для   компиляции  программ.  О  том,  как│
 │               │ создавать  свои конфигурациионные файлы, вы можете узнать│
 │               │ в главе этого файла - СОЗДАНИЕ КОНФИГУРАЦИОННЫХ ФАЙЛОВ.  │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │ /I:path       │  Этот  ключ сообщает компилятору где искать дополнительно│
 │ вместо path вы│ подключаемые файлы.  По умолчанию, файлы ищутся  в том же│
 │ должны подста-│ каталоге, где находится компилятор.                      │
 │ вить полный   │                                                          │
 │ путь каталогу │                                                          │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │ /R:path       │  Если   Вы  хотите,  чтобы  компилятор  после  компиляции│
 │ вместо path вы│ исполняемые  файлы  сохранял  в  какой-то  каталог, то Вы│
 │ должны подста-│ должны   использовать  этот  ключ.  По  умолчанию,  файлы│
 │ вить полный   │ сохраняются в том же каталоге, где находится компилятор. │
 │ путь каталогу │                                                          │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │ /M:path       │  Если  Вы  хотите,  чтобы файлы карт памяти сохранялись в│
 │ вместо path вы│ одном каталоге,  то Вы должны использовать  этот ключ. По│
 │ должны подста-│ умолчанию,  файлы  сохраняются  в том  же  каталоге,  где│
 │ вить полный   │ находится компилятор.                                    │
 │ путь каталогу │                                                          │
 ├───────────────┼──────────────────────────────────────────────────────────┤
 │ /D:disk       │  Данная  версия использует встроенный драйвер виртуальной│
 │               │ памяти, который создает файл подкачки если ему не хватает│
 │ вместо disk вы│ оперативной памяти. По умолчанию, файл подкачки создается│
 │ должны подста-│ на  диске C в корневом каталоге и имеет имя SVMAC.SWP, но│
 │ вить букву со-│ если  на этом диске у вас мало свободного места (меньше 2│
 │ ответствующего│ мегабайт),   то   вы   можете  задать  диск,  на  котором│
 │ диска, минимум│ компилятор  сможет создать файл подкачки. Если диск задан│
 │ диск C        │ неверно  или  на  диске  недостаточно  места,  компилятор│
 │               │ выдаст ошибку.                                           │
 └───────────────┴──────────────────────────────────────────────────────────┘


 3. СОЗДАНИЕ И ИСПОЛЬЗОВАНИЕ ЯЗЫКОВЫХ ФАЙЛОВ ИНТЕРФЕЙСА.
 ────────────────────────────────────────────────────────────────────────────
    Языковые  файлы  интерфейса  предназначены  для  перенастройки интерфейса
 компилятора  на  нужный  вам  язык.  По  умолчанию  компилятор  настроен  на
 английский  язык,  но используя эти файлы вы можете перенастроить компилятор
 практически на любой язык.
    Как  это  делается? Вместе с компилятором поставляется языковые файлы для
 русского  и  украинского  языка - RUSSIAN.LNG и UKRAINIA.LNG соответственно.
 Просмотрев их, вы без труда разберетесь как сделать свой файл. Единственное,
 что  вам  надо будет сделать - заменить все русские или украинские тексты на
 соответствующие тексты того языка, который вы делаете, после чего подключать
 его  при  помощи  ключа  /L,  как  это  описанно в главе этого файла - КЛЮЧИ
 КОМПИЛЯТОРА.


 4. СОЗДАНИЕ КОНФИГУРАЦИОННЫХ ФАЙЛОВ.
 ────────────────────────────────────────────────────────────────────────────
    Конфигурационный  файл  может  помочь  вам  в  компиляции какой-то группы
 программ,  если  они  используют какие-то свои дополнительные файлы, которые
 лежат  в  конкретном  каталоге. Назначения каждого поля приведено в таблице,
 которая  следует  дальше.  Пример создания конфигурационного файла вы можете
 посмотреть  в  файле  SVMAC.INI, который поставляется вместе с компилятором.
 Звездочками  отмечены  те пункты, которые устанавливаются по умолчанию, если
 отсутствует  конфигурационный  файл  или после знака равно в соответствующем
 поле  ничего нет или стоят пробелы. После символа точка с запятой компилятор
 строку  не  рассматривает,  поэтому  после  этого  символа  можно  размещать
 коментарий к вашим настройкам.
 ┌─────────────────┬────────────────────────────────────────────────────────┐
 │  Название поля  │  Назначение                                            │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ MAP_FILE        │ После знака равно вы должны поставить следуещее слово: │
 │                 │  DATAIL       - для полной карты памяти                │
 │                 │  NO_VARIABLES - карта памяти без переменных            │
 │                 │  NO_LABELS - карта памяти без процедур и меток перехода│
 │                 │  NO_MAP       - не создавать карту памяти*             │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ MESSAGES        │ После знака равно вы должны поставить следуещее слово: │
 │                 │  IN_FILE      - для вывода сообщений в файл            │
 │                 │  ON_SCREEN    - для вывода сообщений на экран*         │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ LENGUAGE        │ После знака равно вы должны поставить следуещее слово: │
 │                 │  DEFAULT      - для использования встроенного языка*   │
 │                 │  filename.lng - для загрузки специального языкового    │
 │                 │                 файла                                  │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ INCLUDES_DIR    │ После знака равно вы должны поставить следуещее слово: │
 │                 │  DEFAULT     - для использования текущего каталога*    │
 │                 │  path        - для указания полного пути к подключаемым│
 │                 │                файлам                                  │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ RESULT_DIR      │ После знака равно вы должны поставить следуещее слово: │
 │                 │  DEFAULT     - для использования текущего каталога*    │
 │                 │  path        - для указания полного пути к каталогу,   │
 │                 │                в котором будут создаваться исполняемые │
 │                 │                файлы                                   │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ MAP_DIR         │ После знака равно вы должны поставить следуещее слово: │
 │                 │  DEFAULT     - для использования текущего каталога*    │
 │                 │  path        - для указания полного пути к каталогу,   │
 │                 │                в котором будут создаваться файлы карт  │
 │                 │                памяти                                  │
 ├─────────────────┼────────────────────────────────────────────────────────┤
 │ SWAP_DISK       │ После знака равно вы должны поставить следуещее слово: │
 │                 │  DEFAULT     - для использования диска C*              │
 │                 │  disk        - для использования конкретного диска     │
 └─────────────────┴────────────────────────────────────────────────────────┘


 5. ЧИСЛА.
 ────────────────────────────────────────────────────────────────────────────
    Компилятор  позволяет  работать  с  числами  записанными  в  десятичной и
 шестнадцатеричной  системах  счисления,  при  этом  если  число  записанно в
 шестнадцатеричном  виде,  то  перед ним должен стоять символ доллара  $  или
 после  него  должна стоять буква h, использование сразу обоих выделителей не
 допускается.  Все  остальные  числа  без  этих  выделителей распознаются как
 десятичные  числа.  При  определении переменных вы должны учитывать диапазон
 значений соответствующих типов:
  ┌────────┬─────────────────────────────────────────────┐
  │  Тип   │  Диапазон значений                          │
  ├────────┼─────────────────────────────────────────────┤
  │   DB   │  0..255                                     │
  │   DW   │  -32768..32767                              │
  │   DD   │  -2147483648..2147483647                    │
  │   DQ   │  -9223372036854775808..9223372036854775807  │
  └────────┴─────────────────────────────────────────────┘


 6. ДИРЕКТИВЫ КОМПИЛЯТОРА.
 ────────────────────────────────────────────────────────────────────────────
    К   директивам   компилятора   относятся   команды,   которые  вы  можете
 использовать  при  написании  программы  на  языке  ассемблере  для указания
 компилятору,  что и как надо компилировать. К директивам относятся следующие
 команды:

  INCLUDE filename[,filename[,filename[...]]]
  ──────────────────────────────────────────────────────────────────────────
    Эта    директива    заставляет    компилятор    прервать    компиляцию и
   откомпилировать  файлы  указанные  после  неё  через  запятую  в  той  же
   последовательности в какой они указанны, а после завершения их компиляции
   продолжить   компиляцию  того  файла  где  она(директива)  встретилась. В
   результате  вы  получите  такой  же  эффект,  как  если бы вы скопировали
   содержимое  этих  файлов  в  основной  файл, т.е. эта директива позволяет
   собирать  несколько  файлов  в  одну  программу, как если бы это был один
   целый файл.

  END
  ──────────────────────────────────────────────────────────────────────────
    Эта  директива  означает конец разбора файла, т.е. как только компилятор
   встретит   эту   директиву   -  он  закончит  компиляцию.  Эта  директива
   равносильна физическому концу файла.

  EQU
  ──────────────────────────────────────────────────────────────────────────
    Эта директива позволяет описать константу, которая не будет включаться в
   исполняемый  файл,  но  может использоваться в программе в тех же местах,
   где  можно  использовать число, так же вместо неё можно подставить строку
   взятую  в  кавычки,  после  чего  её  можно  использовать при определении
   переменных.  Перед  этой  директивой  обязательно  должно  быть  имя, под
   которым  она  будет  использоваться  в  программе,  причем, имя не должно
   совпадать   с   именами  уже  имеющимихся  констант,  переменных,  меток,
   процедур.

  [name] DB[, DW, DD, DQ] number[,number[,number[...]]]
  ──────────────────────────────────────────────────────────────────────────
    Эти  директивы  позволяют  определять  переменные типа беззнаковое целое
   размером  один  байт,  знаковое  целое размером два байта, знаковое целое
   размером четыри байта, знаковое целое размером восем байт соответственно.
   Перед  этой  директивой может находиться имя переменной, но если его нет,
   то  переменная  относится  к предыдущей переменной. После директивы можно
   задавать   значения   по  умолчанию,  т.е.  значения  которые  там  будут
   находиться сразу после загрузки. Значения можно задавать через запятую, а
   также  в  кавычках,  как  строку,  при  этом  вместо  каждой  буквы будет
   подставлятся  её  байтовый  ASCII-код,  при этом если директива определят
   число  больше  одного  байтового типа, все остальный байты элемента будут
   равны  нулю.  При  задании  строк, вы можете использовать любые кавычки -
   одинарные   или   двойные,   но  при  этом  строка  должна  открываться и
   закрываться   одинаковым   типом  кавычек,  а  внутри  строки  вы  можете
   использовать кавычки другого типа.

  number DUP
  ──────────────────────────────────────────────────────────────────────────
    Эта  директива  используется  при  определении  переменных  и  позволяет
   выделять  место под переменную без определения каждого её элемента. Перед
   этой директивой должно распологаться число, которое бы показывало сколько
   элементов соответствующего типа надо зарезервировать под эту переменную.

  PROC name
  ──────────────────────────────────────────────────────────────────────────
    Эта  директива  используется  при определении процедуры, если компилятор
   встретит эту директиву в тексте программы, то в список доступных процедур
   будет добавленно имя следующее за этой директивой.

  @name
  ──────────────────────────────────────────────────────────────────────────
    Эта  директива,  имеется  ввиду первый символ - @, сообщает компилятору,
   что   это   имя   должно  использоваться  как  локальное.  Эта  директива
   применяется  только при работе с именами меток перехода и недопустима при
   работе с именами процедур, переменных и констант.

  name:
  ──────────────────────────────────────────────────────────────────────────
    Эта  директива,  имеется  ввиду  последний  символ - двоеточее, сообщает
   компилятору,  что  вы  хотите  определить  метку  перехода с именем name.
   Определив  метку  таким  образом,  дальше  в программе вы сможете сделать
   переход  на эту метку. В строке где содержиться эта запись, все остальные
   записи   игнорируются,   т.е.  любые  команды  в  этой  строке  не  будут
   рассматриваться как команды, а будут просто пропускаться.

  ;
  ──────────────────────────────────────────────────────────────────────────
    Все  коментарии  должны  находиться  после символа точка с запятой. Этот
   символ может стоять как сразу после команды или параметров команды, так и
   через  символ  пробел.  При  разборе строки, этот символ равносилен концу
   строки.

   ┌──────────────────────────────────────────────────────────────────────┐
   │          ВНИМАНИЕ! В качестве разделителей между смысловыми          │
   │     структурами, т.е. между командами и параметрами, допускается     │
   │                  использовать только символ пробел!                  │
   └──────────────────────────────────────────────────────────────────────┘


 7. ИМЕНА ПЕРЕМЕННЫХ, МЕТОК, ПРОЦЕДУР, КОНСТАНТ.
 ────────────────────────────────────────────────────────────────────────────
    Имена  переменных,  меток,  процедур и констант должны отвечать слежующим
 требованиям:  во-первых,  длинна  имени  не  должна  превышать 255 символов,
 во-вторых,   в   имени  допускается  использовать  только  буквы  латинского
 алфавита,  цифры  и  знак  подчеркивания, при этом имя не может начинаться с
 цифры,  в-третьих,  имена не должны повторяться, если они уже использовались
 как имена переменных, меток, процедур или констант.
    При   использовании   имени  вы  должны  учитывать  слдующее:  везде  где
 компилятор  встретит  это  имя,  он  подставит вместо него адрес, на который
 указывет  это  имя, а не значение хранящееся в нем, если это имя переменной,
 но если это имя константы, то компилятор подставит её значение.

   ┌──────────────────────────────────────────────────────────────────────┐
   │         ВНИМАНИЕ! Компилятор не видит разницы между большими и       │
   │                маленькими буквами при работе с именами!              │
   └──────────────────────────────────────────────────────────────────────┘


 8. ЛОКАЛЬНЫЕ МЕТКИ.
 ────────────────────────────────────────────────────────────────────────────
    Локальными  называются  метки,  если первый символ их имени - @ - собака.
 Локальная   метка   отличается   от  обычных  меток  следующими  свойствами:
 локальные   метки  существуют,  до  тех  пор,  пока  вы  не  объявите  новую
 нелокальную  метку.  Это  значит,  что вы можете использовать ваши локальные
 метки  на  отрезке от одной нелокальной метки до другой, т.е. объявленные на
 этом отрезке локальные метки будут доступны для использования только на этом
 отрезке,  за  пределами  этого отрезка, в любую сторону, эти метки как-бы не
 существуют,  поэтому,  в  за пределами  этого  отрезка,  вы можете создавать
 локальные  метки,  с  такими  же  именами,  как  и  на  этом отрезке. При их
 использовании вы не должны опускать символ локализации - @ - собаку.


 9. ОТ АВТОРА.
 ────────────────────────────────────────────────────────────────────────────
    В   настоящем   документе   я  попытался  изложит  правила  использования
 компилятора  и  некоторые  соглашения,  которых вы должны придерживаться при
 написании  программ на языке ассемблере. Хочу придупредить нетерпеливых, эта
 версия компилятора работает наудивление  медленно, поэтому советую запастись
 терпением  при  компиляции больших программ. Придупреждение для тех, кто еще
 не   понял  -  ЭТОТ  КОМПИЛЯТОР  ПРЕДНАЗНАЧЕН  ДЛЯ  НАПИСАНИЯ  ПРОГРАММ  ПОД
 ВИРТУАЛЬНУЮ  МАШИНУ  ShAG  Studio, автором которой также являюсь я, поэтому,
 прежде  чем  писать  программу советую ознакомиться с документациее по языку
 ассемблеру  этой  виртуальной  машины.  Хочу  также заметить, что эта версия
 компилятора писалась в большой спешке, поэтому я не удивлюся если вы найдете
 в нем некоторые ошибки. Просьба о всех ошибках в работе компилятора сообщать
 мне  любым  доступным  вам  способом, мои координаты приведены в конце этого
 документа.



 Автор программы:          Штокало Алексей Геннадиевич
 Адрес домашней странички: www.shag.itgo.com
 E-mail:                   shag@qnx.com
 ────────────────────────────────────────────────────────────────────────────